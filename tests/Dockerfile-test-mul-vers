# Base image with common dependencies
FROM debian:bullseye-slim as base
WORKDIR /app

# Install common system dependencies including build tools
RUN apt-get update && apt-get install -y \
    curl \
    git \
    make \
    build-essential \
    libssl-dev \
    zlib1g-dev \
    libbz2-dev \
    libreadline-dev \
    libsqlite3-dev \
    wget \
    llvm \
    libffi-dev \
    liblzma-dev \
    python3-openssl \
    && rm -rf /var/lib/apt/lists/*

COPY pyproject.toml poetry.lock ./
COPY newtype/ ./newtype/
COPY tests/ ./tests/
COPY build.py ./
COPY Makefile ./
COPY README.md ./
COPY pyproject.toml ./
# Install pyenv
RUN curl https://pyenv.run | bash

# Set up environment variables for pyenv
ENV PATH="/root/.pyenv/bin:/root/.pyenv/shims:$PATH"
RUN pyenv install 3.8
# RUN pyenv install 3.9
# RUN pyenv install 3.10
# RUN pyenv install 3.11
# RUN pyenv install 3.12

# Set global Python version
RUN /bin/bash -c 'for version in 3.8; do \
        pyenv global $version && \
        python${version} -m venv .venv${version}; \
    done;'

# Second stage
FROM debian:bullseye-slim as test
WORKDIR /app

# Install python3-venv for virtual environment support
RUN apt-get update && apt-get install -y \
    python3-venv \
    && rm -rf /var/lib/apt/lists/*

# Copy only the virtual environments from the builder stage
COPY --from=base /app/.venv* /app/

# Copy application files
COPY newtype/ ./newtype/
COPY tests/ ./tests/
COPY build.py ./
COPY Makefile ./
COPY README.md ./
COPY pyproject.toml ./

# Set global Python version
RUN /bin/bash -c 'for version in 3.8; do \
        source .venv${version}/bin/activate && \
        make install-test && \
        deactivate; \
    done'

# Run tests for all Python versions
CMD ["echo", "All Python Versions Tested!"]
